"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/optimism";
exports.ids = ["vendor-chunks/optimism"];
exports.modules = {

/***/ "(ssr)/./node_modules/optimism/lib/context.js":
/*!**********************************************!*\
  !*** ./node_modules/optimism/lib/context.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Slot: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.Slot),\n/* harmony export */   asyncFromGen: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.asyncFromGen),\n/* harmony export */   bindContext: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.bind),\n/* harmony export */   noContext: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.noContext),\n/* harmony export */   nonReactive: () => (/* binding */ nonReactive),\n/* harmony export */   parentEntrySlot: () => (/* binding */ parentEntrySlot),\n/* harmony export */   setTimeout: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.setTimeout)\n/* harmony export */ });\n/* harmony import */ var _wry_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/context */ \"(ssr)/./node_modules/@wry/context/lib/index.js\");\n\nconst parentEntrySlot = new _wry_context__WEBPACK_IMPORTED_MODULE_0__.Slot();\nfunction nonReactive(fn) {\n    return parentEntrySlot.withValue(void 0, fn);\n}\n\n //# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBb0M7QUFDN0IsTUFBTUMsa0JBQWtCLElBQUlELDhDQUFJQSxHQUFHO0FBQ25DLFNBQVNFLFlBQVlDLEVBQUU7SUFDMUIsT0FBT0YsZ0JBQWdCRyxTQUFTLENBQUMsS0FBSyxHQUFHRDtBQUM3QztBQUNnQjtBQUN5RSxDQUN6RixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sb2ctcXVlcnktd2ViLy4vbm9kZV9tb2R1bGVzL29wdGltaXNtL2xpYi9jb250ZXh0LmpzPzY5ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2xvdCB9IGZyb20gXCJAd3J5L2NvbnRleHRcIjtcbmV4cG9ydCBjb25zdCBwYXJlbnRFbnRyeVNsb3QgPSBuZXcgU2xvdCgpO1xuZXhwb3J0IGZ1bmN0aW9uIG5vblJlYWN0aXZlKGZuKSB7XG4gICAgcmV0dXJuIHBhcmVudEVudHJ5U2xvdC53aXRoVmFsdWUodm9pZCAwLCBmbik7XG59XG5leHBvcnQgeyBTbG90IH07XG5leHBvcnQgeyBiaW5kIGFzIGJpbmRDb250ZXh0LCBub0NvbnRleHQsIHNldFRpbWVvdXQsIGFzeW5jRnJvbUdlbiwgfSBmcm9tIFwiQHdyeS9jb250ZXh0XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6WyJTbG90IiwicGFyZW50RW50cnlTbG90Iiwibm9uUmVhY3RpdmUiLCJmbiIsIndpdGhWYWx1ZSIsImJpbmQiLCJiaW5kQ29udGV4dCIsIm5vQ29udGV4dCIsInNldFRpbWVvdXQiLCJhc3luY0Zyb21HZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/dep.js":
/*!******************************************!*\
  !*** ./node_modules/optimism/lib/dep.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dep: () => (/* binding */ dep)\n/* harmony export */ });\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/optimism/lib/helpers.js\");\n\n\nconst EntryMethods = {\n    setDirty: true,\n    dispose: true,\n    forget: true\n};\nfunction dep(options) {\n    const depsByKey = new Map();\n    const subscribe = options && options.subscribe;\n    function depend(key) {\n        const parent = _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.getValue();\n        if (parent) {\n            let dep = depsByKey.get(key);\n            if (!dep) {\n                depsByKey.set(key, dep = new Set);\n            }\n            parent.dependOn(dep);\n            if (typeof subscribe === \"function\") {\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(dep);\n                dep.unsubscribe = subscribe(key);\n            }\n        }\n    }\n    depend.dirty = function dirty(key, entryMethodName) {\n        const dep = depsByKey.get(key);\n        if (dep) {\n            const m = entryMethodName && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwnProperty.call(EntryMethods, entryMethodName) ? entryMethodName : \"setDirty\";\n            // We have to use arrayFromSet(dep).forEach instead of dep.forEach,\n            // because modifying a Set while iterating over it can cause elements in\n            // the Set to be removed from the Set before they've been iterated over.\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(dep).forEach((entry)=>entry[m]());\n            depsByKey.delete(key);\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(dep);\n        }\n    };\n    return depend;\n} //# sourceMappingURL=dep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2RlcC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFDZ0M7QUFDL0UsTUFBTUksZUFBZTtJQUNqQkMsVUFBVTtJQUNWQyxTQUFTO0lBQ1RDLFFBQVE7QUFDWjtBQUNPLFNBQVNDLElBQUlDLE9BQU87SUFDdkIsTUFBTUMsWUFBWSxJQUFJQztJQUN0QixNQUFNQyxZQUFZSCxXQUFXQSxRQUFRRyxTQUFTO0lBQzlDLFNBQVNDLE9BQU9DLEdBQUc7UUFDZixNQUFNQyxTQUFTZix3REFBZUEsQ0FBQ2dCLFFBQVE7UUFDdkMsSUFBSUQsUUFBUTtZQUNSLElBQUlQLE1BQU1FLFVBQVVPLEdBQUcsQ0FBQ0g7WUFDeEIsSUFBSSxDQUFDTixLQUFLO2dCQUNORSxVQUFVUSxHQUFHLENBQUNKLEtBQUtOLE1BQU0sSUFBSVc7WUFDakM7WUFDQUosT0FBT0ssUUFBUSxDQUFDWjtZQUNoQixJQUFJLE9BQU9JLGNBQWMsWUFBWTtnQkFDakNWLDZEQUFnQkEsQ0FBQ007Z0JBQ2pCQSxJQUFJYSxXQUFXLEdBQUdULFVBQVVFO1lBQ2hDO1FBQ0o7SUFDSjtJQUNBRCxPQUFPUyxLQUFLLEdBQUcsU0FBU0EsTUFBTVIsR0FBRyxFQUFFUyxlQUFlO1FBQzlDLE1BQU1mLE1BQU1FLFVBQVVPLEdBQUcsQ0FBQ0g7UUFDMUIsSUFBSU4sS0FBSztZQUNMLE1BQU1nQixJQUFJLG1CQUNOdkIsdURBQWNBLENBQUN3QixJQUFJLENBQUNyQixjQUFjbUIsbUJBQW9CQSxrQkFBa0I7WUFDNUUsbUVBQW1FO1lBQ25FLHdFQUF3RTtZQUN4RSx3RUFBd0U7WUFDeEVwQix5REFBWUEsQ0FBQ0ssS0FBS2tCLE9BQU8sQ0FBQ0MsQ0FBQUEsUUFBU0EsS0FBSyxDQUFDSCxFQUFFO1lBQzNDZCxVQUFVa0IsTUFBTSxDQUFDZDtZQUNqQlosNkRBQWdCQSxDQUFDTTtRQUNyQjtJQUNKO0lBQ0EsT0FBT0s7QUFDWCxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xvZy1xdWVyeS13ZWIvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2RlcC5qcz8zY2VmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcmVudEVudHJ5U2xvdCB9IGZyb20gXCIuL2NvbnRleHQuanNcIjtcbmltcG9ydCB7IGhhc093blByb3BlcnR5LCBtYXliZVVuc3Vic2NyaWJlLCBhcnJheUZyb21TZXQsIH0gZnJvbSBcIi4vaGVscGVycy5qc1wiO1xuY29uc3QgRW50cnlNZXRob2RzID0ge1xuICAgIHNldERpcnR5OiB0cnVlLFxuICAgIGRpc3Bvc2U6IHRydWUsXG4gICAgZm9yZ2V0OiB0cnVlLCAvLyBGdWxseSByZW1vdmUgcGFyZW50IEVudHJ5IGZyb20gTFJVIGNhY2hlIGFuZCBjb21wdXRhdGlvbiBncmFwaFxufTtcbmV4cG9ydCBmdW5jdGlvbiBkZXAob3B0aW9ucykge1xuICAgIGNvbnN0IGRlcHNCeUtleSA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBzdWJzY3JpYmUgPSBvcHRpb25zICYmIG9wdGlvbnMuc3Vic2NyaWJlO1xuICAgIGZ1bmN0aW9uIGRlcGVuZChrZXkpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gcGFyZW50RW50cnlTbG90LmdldFZhbHVlKCk7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIGxldCBkZXAgPSBkZXBzQnlLZXkuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAoIWRlcCkge1xuICAgICAgICAgICAgICAgIGRlcHNCeUtleS5zZXQoa2V5LCBkZXAgPSBuZXcgU2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5kZXBlbmRPbihkZXApO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIG1heWJlVW5zdWJzY3JpYmUoZGVwKTtcbiAgICAgICAgICAgICAgICBkZXAudW5zdWJzY3JpYmUgPSBzdWJzY3JpYmUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXBlbmQuZGlydHkgPSBmdW5jdGlvbiBkaXJ0eShrZXksIGVudHJ5TWV0aG9kTmFtZSkge1xuICAgICAgICBjb25zdCBkZXAgPSBkZXBzQnlLZXkuZ2V0KGtleSk7XG4gICAgICAgIGlmIChkZXApIHtcbiAgICAgICAgICAgIGNvbnN0IG0gPSAoZW50cnlNZXRob2ROYW1lICYmXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcGVydHkuY2FsbChFbnRyeU1ldGhvZHMsIGVudHJ5TWV0aG9kTmFtZSkpID8gZW50cnlNZXRob2ROYW1lIDogXCJzZXREaXJ0eVwiO1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byB1c2UgYXJyYXlGcm9tU2V0KGRlcCkuZm9yRWFjaCBpbnN0ZWFkIG9mIGRlcC5mb3JFYWNoLFxuICAgICAgICAgICAgLy8gYmVjYXVzZSBtb2RpZnlpbmcgYSBTZXQgd2hpbGUgaXRlcmF0aW5nIG92ZXIgaXQgY2FuIGNhdXNlIGVsZW1lbnRzIGluXG4gICAgICAgICAgICAvLyB0aGUgU2V0IHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgU2V0IGJlZm9yZSB0aGV5J3ZlIGJlZW4gaXRlcmF0ZWQgb3Zlci5cbiAgICAgICAgICAgIGFycmF5RnJvbVNldChkZXApLmZvckVhY2goZW50cnkgPT4gZW50cnlbbV0oKSk7XG4gICAgICAgICAgICBkZXBzQnlLZXkuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICBtYXliZVVuc3Vic2NyaWJlKGRlcCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBkZXBlbmQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXAuanMubWFwIl0sIm5hbWVzIjpbInBhcmVudEVudHJ5U2xvdCIsImhhc093blByb3BlcnR5IiwibWF5YmVVbnN1YnNjcmliZSIsImFycmF5RnJvbVNldCIsIkVudHJ5TWV0aG9kcyIsInNldERpcnR5IiwiZGlzcG9zZSIsImZvcmdldCIsImRlcCIsIm9wdGlvbnMiLCJkZXBzQnlLZXkiLCJNYXAiLCJzdWJzY3JpYmUiLCJkZXBlbmQiLCJrZXkiLCJwYXJlbnQiLCJnZXRWYWx1ZSIsImdldCIsInNldCIsIlNldCIsImRlcGVuZE9uIiwidW5zdWJzY3JpYmUiLCJkaXJ0eSIsImVudHJ5TWV0aG9kTmFtZSIsIm0iLCJjYWxsIiwiZm9yRWFjaCIsImVudHJ5IiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/dep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/entry.js":
/*!********************************************!*\
  !*** ./node_modules/optimism/lib/entry.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Entry: () => (/* binding */ Entry)\n/* harmony export */ });\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/optimism/lib/helpers.js\");\n\n\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n    if (!condition) {\n        throw new Error(optionalMessage || \"assertion failure\");\n    }\n}\nfunction valueIs(a, b) {\n    const len = a.length;\n    return(// Unknown values are not equal to each other.\n    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length && // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]);\n}\nfunction valueGet(value) {\n    switch(value.length){\n        case 0:\n            throw new Error(\"unknown value\");\n        case 1:\n            return value[0];\n        case 2:\n            throw value[1];\n    }\n}\nfunction valueCopy(value) {\n    return value.slice(0);\n}\nclass Entry {\n    constructor(fn){\n        this.fn = fn;\n        this.parents = new Set();\n        this.childValues = new Map();\n        // When this Entry has children that are dirty, this property becomes\n        // a Set containing other Entry objects, borrowed from emptySetPool.\n        // When the set becomes empty, it gets recycled back to emptySetPool.\n        this.dirtyChildren = null;\n        this.dirty = true;\n        this.recomputing = false;\n        this.value = [];\n        this.deps = null;\n        ++Entry.count;\n    }\n    peek() {\n        if (this.value.length === 1 && !mightBeDirty(this)) {\n            rememberParent(this);\n            return this.value[0];\n        }\n    }\n    // This is the most important method of the Entry API, because it\n    // determines whether the cached this.value can be returned immediately,\n    // or must be recomputed. The overall performance of the caching system\n    // depends on the truth of the following observations: (1) this.dirty is\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n    // (3) valueGet(this.value) is usually returned without recomputation.\n    recompute(args) {\n        assert(!this.recomputing, \"already recomputing\");\n        rememberParent(this);\n        return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n    }\n    setDirty() {\n        if (this.dirty) return;\n        this.dirty = true;\n        reportDirty(this);\n        // We can go ahead and unsubscribe here, since any further dirty\n        // notifications we receive will be redundant, and unsubscribing may\n        // free up some resources, e.g. file watchers.\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(this);\n    }\n    dispose() {\n        this.setDirty();\n        // Sever any dependency relationships with our own children, so those\n        // children don't retain this parent Entry in their child.parents sets,\n        // thereby preventing it from being fully garbage collected.\n        forgetChildren(this);\n        // Because this entry has been kicked out of the cache (in index.js),\n        // we've lost the ability to find out if/when this entry becomes dirty,\n        // whether that happens through a subscription, because of a direct call\n        // to entry.setDirty(), or because one of its children becomes dirty.\n        // Because of this loss of future information, we have to assume the\n        // worst (that this entry might have become dirty very soon), so we must\n        // immediately mark this entry's parents as dirty. Normally we could\n        // just call entry.setDirty() rather than calling parent.setDirty() for\n        // each parent, but that would leave this entry in parent.childValues\n        // and parent.dirtyChildren, which would prevent the child from being\n        // truly forgotten.\n        eachParent(this, (parent, child)=>{\n            parent.setDirty();\n            forgetChild(parent, this);\n        });\n    }\n    forget() {\n        // The code that creates Entry objects in index.ts will replace this method\n        // with one that actually removes the Entry from the cache, which will also\n        // trigger the entry.dispose method.\n        this.dispose();\n    }\n    dependOn(dep) {\n        dep.add(this);\n        if (!this.deps) {\n            this.deps = emptySetPool.pop() || new Set();\n        }\n        this.deps.add(dep);\n    }\n    forgetDeps() {\n        if (this.deps) {\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(this.deps).forEach((dep)=>dep.delete(this));\n            this.deps.clear();\n            emptySetPool.push(this.deps);\n            this.deps = null;\n        }\n    }\n}\nEntry.count = 0;\nfunction rememberParent(child) {\n    const parent = _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.getValue();\n    if (parent) {\n        child.parents.add(parent);\n        if (!parent.childValues.has(child)) {\n            parent.childValues.set(child, []);\n        }\n        if (mightBeDirty(child)) {\n            reportDirtyChild(parent, child);\n        } else {\n            reportCleanChild(parent, child);\n        }\n        return parent;\n    }\n}\nfunction reallyRecompute(entry, args) {\n    forgetChildren(entry);\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\n    _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.withValue(entry, recomputeNewValue, [\n        entry,\n        args\n    ]);\n    if (maybeSubscribe(entry, args)) {\n        // If we successfully recomputed entry.value and did not fail to\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\n        setClean(entry);\n    }\n    return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n    entry.recomputing = true;\n    const { normalizeResult } = entry;\n    let oldValueCopy;\n    if (normalizeResult && entry.value.length === 1) {\n        oldValueCopy = valueCopy(entry.value);\n    }\n    // Make entry.value an empty array, representing an unknown value.\n    entry.value.length = 0;\n    try {\n        // If entry.fn succeeds, entry.value will become a normal Value.\n        entry.value[0] = entry.fn.apply(null, args);\n        // If we have a viable oldValueCopy to compare with the (successfully\n        // recomputed) new entry.value, and they are not already === identical, give\n        // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n        // and/or entry.value[0] to determine the final cached entry.value.\n        if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n            try {\n                entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n            } catch (_a) {\n            // If normalizeResult throws, just use the newer value, rather than\n            // saving the exception as entry.value[1].\n            }\n        }\n    } catch (e) {\n        // If entry.fn throws, entry.value will hold that exception.\n        entry.value[1] = e;\n    }\n    // Either way, this line is always reached.\n    entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n    entry.dirty = false;\n    if (mightBeDirty(entry)) {\n        // This Entry may still have dirty children, in which case we can't\n        // let our parents know we're clean just yet.\n        return;\n    }\n    reportClean(entry);\n}\nfunction reportDirty(child) {\n    eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n    eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n    const parentCount = child.parents.size;\n    if (parentCount) {\n        const parents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(child.parents);\n        for(let i = 0; i < parentCount; ++i){\n            callback(parents[i], child);\n        }\n    }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n    // Must have called rememberParent(child) before calling\n    // reportDirtyChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(mightBeDirty(child));\n    const parentWasClean = !mightBeDirty(parent);\n    if (!parent.dirtyChildren) {\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\n    } else if (parent.dirtyChildren.has(child)) {\n        // If we already know this child is dirty, then we must have already\n        // informed our own parents that we are dirty, so we can terminate\n        // the recursion early.\n        return;\n    }\n    parent.dirtyChildren.add(child);\n    // If parent was clean before, it just became (possibly) dirty (according to\n    // mightBeDirty), since we just added child to parent.dirtyChildren.\n    if (parentWasClean) {\n        reportDirty(parent);\n    }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n    // Must have called rememberChild(child) before calling\n    // reportCleanChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(!mightBeDirty(child));\n    const childValue = parent.childValues.get(child);\n    if (childValue.length === 0) {\n        parent.childValues.set(child, valueCopy(child.value));\n    } else if (!valueIs(childValue, child.value)) {\n        parent.setDirty();\n    }\n    removeDirtyChild(parent, child);\n    if (mightBeDirty(parent)) {\n        return;\n    }\n    reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n    const dc = parent.dirtyChildren;\n    if (dc) {\n        dc.delete(child);\n        if (dc.size === 0) {\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\n                emptySetPool.push(dc);\n            }\n            parent.dirtyChildren = null;\n        }\n    }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n    if (parent.childValues.size > 0) {\n        parent.childValues.forEach((_value, child)=>{\n            forgetChild(parent, child);\n        });\n    }\n    // Remove this parent Entry from any sets to which it was added by the\n    // addToSet method.\n    parent.forgetDeps();\n    // After we forget all our children, this.dirtyChildren must be empty\n    // and therefore must have been reset to null.\n    assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n    child.parents.delete(parent);\n    parent.childValues.delete(child);\n    removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n    if (typeof entry.subscribe === \"function\") {\n        try {\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(entry); // Prevent double subscriptions.\n            entry.unsubscribe = entry.subscribe.apply(null, args);\n        } catch (e) {\n            // If this Entry has a subscribe function and it threw an exception\n            // (or an unsubscribe function it previously returned now throws),\n            // return false to indicate that we were not able to subscribe (or\n            // unsubscribe), and this Entry should remain dirty.\n            entry.setDirty();\n            return false;\n        }\n    }\n    // Returning true indicates either that there was no entry.subscribe\n    // function or that it succeeded.\n    return true;\n} //# sourceMappingURL=entry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUNlO0FBQzlELE1BQU1HLGVBQWUsRUFBRTtBQUN2QixNQUFNQyxtQkFBbUI7QUFDekIsdUVBQXVFO0FBQ3ZFLCtCQUErQjtBQUMvQixTQUFTQyxPQUFPQyxTQUFTLEVBQUVDLGVBQWU7SUFDdEMsSUFBSSxDQUFDRCxXQUFXO1FBQ1osTUFBTSxJQUFJRSxNQUFNRCxtQkFBbUI7SUFDdkM7QUFDSjtBQUNBLFNBQVNFLFFBQVFDLENBQUMsRUFBRUMsQ0FBQztJQUNqQixNQUFNQyxNQUFNRixFQUFFRyxNQUFNO0lBQ3BCLE9BQ0EsOENBQThDO0lBQzlDRCxNQUFNLEtBQ0Ysa0VBQWtFO0lBQ2xFQSxRQUFRRCxFQUFFRSxNQUFNLElBQ2hCLHNEQUFzRDtJQUN0REgsQ0FBQyxDQUFDRSxNQUFNLEVBQUUsS0FBS0QsQ0FBQyxDQUFDQyxNQUFNLEVBQUU7QUFDakM7QUFDQSxTQUFTRSxTQUFTQyxLQUFLO0lBQ25CLE9BQVFBLE1BQU1GLE1BQU07UUFDaEIsS0FBSztZQUFHLE1BQU0sSUFBSUwsTUFBTTtRQUN4QixLQUFLO1lBQUcsT0FBT08sS0FBSyxDQUFDLEVBQUU7UUFDdkIsS0FBSztZQUFHLE1BQU1BLEtBQUssQ0FBQyxFQUFFO0lBQzFCO0FBQ0o7QUFDQSxTQUFTQyxVQUFVRCxLQUFLO0lBQ3BCLE9BQU9BLE1BQU1FLEtBQUssQ0FBQztBQUN2QjtBQUNPLE1BQU1DO0lBQ1RDLFlBQVlDLEVBQUUsQ0FBRTtRQUNaLElBQUksQ0FBQ0EsRUFBRSxHQUFHQTtRQUNWLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDO1FBQ25CLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlDO1FBQ3ZCLHFFQUFxRTtRQUNyRSxvRUFBb0U7UUFDcEUscUVBQXFFO1FBQ3JFLElBQUksQ0FBQ0MsYUFBYSxHQUFHO1FBQ3JCLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDWixLQUFLLEdBQUcsRUFBRTtRQUNmLElBQUksQ0FBQ2EsSUFBSSxHQUFHO1FBQ1osRUFBRVYsTUFBTVcsS0FBSztJQUNqQjtJQUNBQyxPQUFPO1FBQ0gsSUFBSSxJQUFJLENBQUNmLEtBQUssQ0FBQ0YsTUFBTSxLQUFLLEtBQUssQ0FBQ2tCLGFBQWEsSUFBSSxHQUFHO1lBQ2hEQyxlQUFlLElBQUk7WUFDbkIsT0FBTyxJQUFJLENBQUNqQixLQUFLLENBQUMsRUFBRTtRQUN4QjtJQUNKO0lBQ0EsaUVBQWlFO0lBQ2pFLHdFQUF3RTtJQUN4RSx1RUFBdUU7SUFDdkUsd0VBQXdFO0lBQ3hFLHdFQUF3RTtJQUN4RSxzRUFBc0U7SUFDdEVrQixVQUFVQyxJQUFJLEVBQUU7UUFDWjdCLE9BQU8sQ0FBQyxJQUFJLENBQUNzQixXQUFXLEVBQUU7UUFDMUJLLGVBQWUsSUFBSTtRQUNuQixPQUFPRCxhQUFhLElBQUksSUFDbEJJLGdCQUFnQixJQUFJLEVBQUVELFFBQ3RCcEIsU0FBUyxJQUFJLENBQUNDLEtBQUs7SUFDN0I7SUFDQXFCLFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQ1YsS0FBSyxFQUNWO1FBQ0osSUFBSSxDQUFDQSxLQUFLLEdBQUc7UUFDYlcsWUFBWSxJQUFJO1FBQ2hCLGdFQUFnRTtRQUNoRSxvRUFBb0U7UUFDcEUsOENBQThDO1FBQzlDcEMsNkRBQWdCQSxDQUFDLElBQUk7SUFDekI7SUFDQXFDLFVBQVU7UUFDTixJQUFJLENBQUNGLFFBQVE7UUFDYixxRUFBcUU7UUFDckUsdUVBQXVFO1FBQ3ZFLDREQUE0RDtRQUM1REcsZUFBZSxJQUFJO1FBQ25CLHFFQUFxRTtRQUNyRSx1RUFBdUU7UUFDdkUsd0VBQXdFO1FBQ3hFLHFFQUFxRTtRQUNyRSxvRUFBb0U7UUFDcEUsd0VBQXdFO1FBQ3hFLG9FQUFvRTtRQUNwRSx1RUFBdUU7UUFDdkUscUVBQXFFO1FBQ3JFLHFFQUFxRTtRQUNyRSxtQkFBbUI7UUFDbkJDLFdBQVcsSUFBSSxFQUFFLENBQUNDLFFBQVFDO1lBQ3RCRCxPQUFPTCxRQUFRO1lBQ2ZPLFlBQVlGLFFBQVEsSUFBSTtRQUM1QjtJQUNKO0lBQ0FHLFNBQVM7UUFDTCwyRUFBMkU7UUFDM0UsMkVBQTJFO1FBQzNFLG9DQUFvQztRQUNwQyxJQUFJLENBQUNOLE9BQU87SUFDaEI7SUFDQU8sU0FBU0MsR0FBRyxFQUFFO1FBQ1ZBLElBQUlDLEdBQUcsQ0FBQyxJQUFJO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ25CLElBQUksRUFBRTtZQUNaLElBQUksQ0FBQ0EsSUFBSSxHQUFHekIsYUFBYTZDLEdBQUcsTUFBTSxJQUFJMUI7UUFDMUM7UUFDQSxJQUFJLENBQUNNLElBQUksQ0FBQ21CLEdBQUcsQ0FBQ0Q7SUFDbEI7SUFDQUcsYUFBYTtRQUNULElBQUksSUFBSSxDQUFDckIsSUFBSSxFQUFFO1lBQ1gxQix5REFBWUEsQ0FBQyxJQUFJLENBQUMwQixJQUFJLEVBQUVzQixPQUFPLENBQUNKLENBQUFBLE1BQU9BLElBQUlLLE1BQU0sQ0FBQyxJQUFJO1lBQ3RELElBQUksQ0FBQ3ZCLElBQUksQ0FBQ3dCLEtBQUs7WUFDZmpELGFBQWFrRCxJQUFJLENBQUMsSUFBSSxDQUFDekIsSUFBSTtZQUMzQixJQUFJLENBQUNBLElBQUksR0FBRztRQUNoQjtJQUNKO0FBQ0o7QUFDQVYsTUFBTVcsS0FBSyxHQUFHO0FBQ2QsU0FBU0csZUFBZVUsS0FBSztJQUN6QixNQUFNRCxTQUFTekMsd0RBQWVBLENBQUNzRCxRQUFRO0lBQ3ZDLElBQUliLFFBQVE7UUFDUkMsTUFBTXJCLE9BQU8sQ0FBQzBCLEdBQUcsQ0FBQ047UUFDbEIsSUFBSSxDQUFDQSxPQUFPbEIsV0FBVyxDQUFDZ0MsR0FBRyxDQUFDYixRQUFRO1lBQ2hDRCxPQUFPbEIsV0FBVyxDQUFDaUMsR0FBRyxDQUFDZCxPQUFPLEVBQUU7UUFDcEM7UUFDQSxJQUFJWCxhQUFhVyxRQUFRO1lBQ3JCZSxpQkFBaUJoQixRQUFRQztRQUM3QixPQUNLO1lBQ0RnQixpQkFBaUJqQixRQUFRQztRQUM3QjtRQUNBLE9BQU9EO0lBQ1g7QUFDSjtBQUNBLFNBQVNOLGdCQUFnQndCLEtBQUssRUFBRXpCLElBQUk7SUFDaENLLGVBQWVvQjtJQUNmLHdFQUF3RTtJQUN4RTNELHdEQUFlQSxDQUFDNEQsU0FBUyxDQUFDRCxPQUFPRSxtQkFBbUI7UUFBQ0Y7UUFBT3pCO0tBQUs7SUFDakUsSUFBSTRCLGVBQWVILE9BQU96QixPQUFPO1FBQzdCLGdFQUFnRTtRQUNoRSxnRUFBZ0U7UUFDaEU2QixTQUFTSjtJQUNiO0lBQ0EsT0FBTzdDLFNBQVM2QyxNQUFNNUMsS0FBSztBQUMvQjtBQUNBLFNBQVM4QyxrQkFBa0JGLEtBQUssRUFBRXpCLElBQUk7SUFDbEN5QixNQUFNaEMsV0FBVyxHQUFHO0lBQ3BCLE1BQU0sRUFBRXFDLGVBQWUsRUFBRSxHQUFHTDtJQUM1QixJQUFJTTtJQUNKLElBQUlELG1CQUFtQkwsTUFBTTVDLEtBQUssQ0FBQ0YsTUFBTSxLQUFLLEdBQUc7UUFDN0NvRCxlQUFlakQsVUFBVTJDLE1BQU01QyxLQUFLO0lBQ3hDO0lBQ0Esa0VBQWtFO0lBQ2xFNEMsTUFBTTVDLEtBQUssQ0FBQ0YsTUFBTSxHQUFHO0lBQ3JCLElBQUk7UUFDQSxnRUFBZ0U7UUFDaEU4QyxNQUFNNUMsS0FBSyxDQUFDLEVBQUUsR0FBRzRDLE1BQU12QyxFQUFFLENBQUM4QyxLQUFLLENBQUMsTUFBTWhDO1FBQ3RDLHFFQUFxRTtRQUNyRSw0RUFBNEU7UUFDNUUseUVBQXlFO1FBQ3pFLG1FQUFtRTtRQUNuRSxJQUFJOEIsbUJBQW1CQyxnQkFBZ0IsQ0FBQ3hELFFBQVF3RCxjQUFjTixNQUFNNUMsS0FBSyxHQUFHO1lBQ3hFLElBQUk7Z0JBQ0E0QyxNQUFNNUMsS0FBSyxDQUFDLEVBQUUsR0FBR2lELGdCQUFnQkwsTUFBTTVDLEtBQUssQ0FBQyxFQUFFLEVBQUVrRCxZQUFZLENBQUMsRUFBRTtZQUNwRSxFQUNBLE9BQU9FLElBQUk7WUFDUCxtRUFBbUU7WUFDbkUsMENBQTBDO1lBQzlDO1FBQ0o7SUFDSixFQUNBLE9BQU9DLEdBQUc7UUFDTiw0REFBNEQ7UUFDNURULE1BQU01QyxLQUFLLENBQUMsRUFBRSxHQUFHcUQ7SUFDckI7SUFDQSwyQ0FBMkM7SUFDM0NULE1BQU1oQyxXQUFXLEdBQUc7QUFDeEI7QUFDQSxTQUFTSSxhQUFhNEIsS0FBSztJQUN2QixPQUFPQSxNQUFNakMsS0FBSyxJQUFJLENBQUMsQ0FBRWlDLENBQUFBLE1BQU1sQyxhQUFhLElBQUlrQyxNQUFNbEMsYUFBYSxDQUFDNEMsSUFBSTtBQUM1RTtBQUNBLFNBQVNOLFNBQVNKLEtBQUs7SUFDbkJBLE1BQU1qQyxLQUFLLEdBQUc7SUFDZCxJQUFJSyxhQUFhNEIsUUFBUTtRQUNyQixtRUFBbUU7UUFDbkUsNkNBQTZDO1FBQzdDO0lBQ0o7SUFDQVcsWUFBWVg7QUFDaEI7QUFDQSxTQUFTdEIsWUFBWUssS0FBSztJQUN0QkYsV0FBV0UsT0FBT2U7QUFDdEI7QUFDQSxTQUFTYSxZQUFZNUIsS0FBSztJQUN0QkYsV0FBV0UsT0FBT2dCO0FBQ3RCO0FBQ0EsU0FBU2xCLFdBQVdFLEtBQUssRUFBRTZCLFFBQVE7SUFDL0IsTUFBTUMsY0FBYzlCLE1BQU1yQixPQUFPLENBQUNnRCxJQUFJO0lBQ3RDLElBQUlHLGFBQWE7UUFDYixNQUFNbkQsVUFBVW5CLHlEQUFZQSxDQUFDd0MsTUFBTXJCLE9BQU87UUFDMUMsSUFBSyxJQUFJb0QsSUFBSSxHQUFHQSxJQUFJRCxhQUFhLEVBQUVDLEVBQUc7WUFDbENGLFNBQVNsRCxPQUFPLENBQUNvRCxFQUFFLEVBQUUvQjtRQUN6QjtJQUNKO0FBQ0o7QUFDQSxpRUFBaUU7QUFDakUsU0FBU2UsaUJBQWlCaEIsTUFBTSxFQUFFQyxLQUFLO0lBQ25DLHdEQUF3RDtJQUN4RCxtQ0FBbUM7SUFDbkNyQyxPQUFPb0MsT0FBT2xCLFdBQVcsQ0FBQ2dDLEdBQUcsQ0FBQ2I7SUFDOUJyQyxPQUFPMEIsYUFBYVc7SUFDcEIsTUFBTWdDLGlCQUFpQixDQUFDM0MsYUFBYVU7SUFDckMsSUFBSSxDQUFDQSxPQUFPaEIsYUFBYSxFQUFFO1FBQ3ZCZ0IsT0FBT2hCLGFBQWEsR0FBR3RCLGFBQWE2QyxHQUFHLE1BQU0sSUFBSTFCO0lBQ3JELE9BQ0ssSUFBSW1CLE9BQU9oQixhQUFhLENBQUM4QixHQUFHLENBQUNiLFFBQVE7UUFDdEMsb0VBQW9FO1FBQ3BFLGtFQUFrRTtRQUNsRSx1QkFBdUI7UUFDdkI7SUFDSjtJQUNBRCxPQUFPaEIsYUFBYSxDQUFDc0IsR0FBRyxDQUFDTDtJQUN6Qiw0RUFBNEU7SUFDNUUsb0VBQW9FO0lBQ3BFLElBQUlnQyxnQkFBZ0I7UUFDaEJyQyxZQUFZSTtJQUNoQjtBQUNKO0FBQ0EsdUVBQXVFO0FBQ3ZFLFNBQVNpQixpQkFBaUJqQixNQUFNLEVBQUVDLEtBQUs7SUFDbkMsdURBQXVEO0lBQ3ZELG1DQUFtQztJQUNuQ3JDLE9BQU9vQyxPQUFPbEIsV0FBVyxDQUFDZ0MsR0FBRyxDQUFDYjtJQUM5QnJDLE9BQU8sQ0FBQzBCLGFBQWFXO0lBQ3JCLE1BQU1pQyxhQUFhbEMsT0FBT2xCLFdBQVcsQ0FBQ3FELEdBQUcsQ0FBQ2xDO0lBQzFDLElBQUlpQyxXQUFXOUQsTUFBTSxLQUFLLEdBQUc7UUFDekI0QixPQUFPbEIsV0FBVyxDQUFDaUMsR0FBRyxDQUFDZCxPQUFPMUIsVUFBVTBCLE1BQU0zQixLQUFLO0lBQ3ZELE9BQ0ssSUFBSSxDQUFDTixRQUFRa0UsWUFBWWpDLE1BQU0zQixLQUFLLEdBQUc7UUFDeEMwQixPQUFPTCxRQUFRO0lBQ25CO0lBQ0F5QyxpQkFBaUJwQyxRQUFRQztJQUN6QixJQUFJWCxhQUFhVSxTQUFTO1FBQ3RCO0lBQ0o7SUFDQTZCLFlBQVk3QjtBQUNoQjtBQUNBLFNBQVNvQyxpQkFBaUJwQyxNQUFNLEVBQUVDLEtBQUs7SUFDbkMsTUFBTW9DLEtBQUtyQyxPQUFPaEIsYUFBYTtJQUMvQixJQUFJcUQsSUFBSTtRQUNKQSxHQUFHM0IsTUFBTSxDQUFDVDtRQUNWLElBQUlvQyxHQUFHVCxJQUFJLEtBQUssR0FBRztZQUNmLElBQUlsRSxhQUFhVSxNQUFNLEdBQUdULGtCQUFrQjtnQkFDeENELGFBQWFrRCxJQUFJLENBQUN5QjtZQUN0QjtZQUNBckMsT0FBT2hCLGFBQWEsR0FBRztRQUMzQjtJQUNKO0FBQ0o7QUFDQSxtRUFBbUU7QUFDbkUsb0JBQW9CO0FBQ3BCLFNBQVNjLGVBQWVFLE1BQU07SUFDMUIsSUFBSUEsT0FBT2xCLFdBQVcsQ0FBQzhDLElBQUksR0FBRyxHQUFHO1FBQzdCNUIsT0FBT2xCLFdBQVcsQ0FBQzJCLE9BQU8sQ0FBQyxDQUFDNkIsUUFBUXJDO1lBQ2hDQyxZQUFZRixRQUFRQztRQUN4QjtJQUNKO0lBQ0Esc0VBQXNFO0lBQ3RFLG1CQUFtQjtJQUNuQkQsT0FBT1EsVUFBVTtJQUNqQixxRUFBcUU7SUFDckUsOENBQThDO0lBQzlDNUMsT0FBT29DLE9BQU9oQixhQUFhLEtBQUs7QUFDcEM7QUFDQSxTQUFTa0IsWUFBWUYsTUFBTSxFQUFFQyxLQUFLO0lBQzlCQSxNQUFNckIsT0FBTyxDQUFDOEIsTUFBTSxDQUFDVjtJQUNyQkEsT0FBT2xCLFdBQVcsQ0FBQzRCLE1BQU0sQ0FBQ1Q7SUFDMUJtQyxpQkFBaUJwQyxRQUFRQztBQUM3QjtBQUNBLFNBQVNvQixlQUFlSCxLQUFLLEVBQUV6QixJQUFJO0lBQy9CLElBQUksT0FBT3lCLE1BQU1xQixTQUFTLEtBQUssWUFBWTtRQUN2QyxJQUFJO1lBQ0EvRSw2REFBZ0JBLENBQUMwRCxRQUFRLGdDQUFnQztZQUN6REEsTUFBTXNCLFdBQVcsR0FBR3RCLE1BQU1xQixTQUFTLENBQUNkLEtBQUssQ0FBQyxNQUFNaEM7UUFDcEQsRUFDQSxPQUFPa0MsR0FBRztZQUNOLG1FQUFtRTtZQUNuRSxrRUFBa0U7WUFDbEUsa0VBQWtFO1lBQ2xFLG9EQUFvRDtZQUNwRFQsTUFBTXZCLFFBQVE7WUFDZCxPQUFPO1FBQ1g7SUFDSjtJQUNBLG9FQUFvRTtJQUNwRSxpQ0FBaUM7SUFDakMsT0FBTztBQUNYLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbG9nLXF1ZXJ5LXdlYi8uL25vZGVfbW9kdWxlcy9vcHRpbWlzbS9saWIvZW50cnkuanM/OWI4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJlbnRFbnRyeVNsb3QgfSBmcm9tIFwiLi9jb250ZXh0LmpzXCI7XG5pbXBvcnQgeyBtYXliZVVuc3Vic2NyaWJlLCBhcnJheUZyb21TZXQgfSBmcm9tIFwiLi9oZWxwZXJzLmpzXCI7XG5jb25zdCBlbXB0eVNldFBvb2wgPSBbXTtcbmNvbnN0IFBPT0xfVEFSR0VUX1NJWkUgPSAxMDA7XG4vLyBTaW5jZSB0aGlzIHBhY2thZ2UgbWlnaHQgYmUgdXNlZCBicm93c2Vycywgd2Ugc2hvdWxkIGF2b2lkIHVzaW5nIHRoZVxuLy8gTm9kZSBidWlsdC1pbiBhc3NlcnQgbW9kdWxlLlxuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgb3B0aW9uYWxNZXNzYWdlKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG9wdGlvbmFsTWVzc2FnZSB8fCBcImFzc2VydGlvbiBmYWlsdXJlXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbHVlSXMoYSwgYikge1xuICAgIGNvbnN0IGxlbiA9IGEubGVuZ3RoO1xuICAgIHJldHVybiAoXG4gICAgLy8gVW5rbm93biB2YWx1ZXMgYXJlIG5vdCBlcXVhbCB0byBlYWNoIG90aGVyLlxuICAgIGxlbiA+IDAgJiZcbiAgICAgICAgLy8gQm90aCB2YWx1ZXMgbXVzdCBiZSBvcmRpbmFyeSAob3IgYm90aCBleGNlcHRpb25hbCkgdG8gYmUgZXF1YWwuXG4gICAgICAgIGxlbiA9PT0gYi5sZW5ndGggJiZcbiAgICAgICAgLy8gVGhlIHVuZGVybHlpbmcgdmFsdWUgb3IgZXhjZXB0aW9uIG11c3QgYmUgdGhlIHNhbWUuXG4gICAgICAgIGFbbGVuIC0gMV0gPT09IGJbbGVuIC0gMV0pO1xufVxuZnVuY3Rpb24gdmFsdWVHZXQodmFsdWUpIHtcbiAgICBzd2l0Y2ggKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHRocm93IG5ldyBFcnJvcihcInVua25vd24gdmFsdWVcIik7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIHZhbHVlWzBdO1xuICAgICAgICBjYXNlIDI6IHRocm93IHZhbHVlWzFdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbHVlQ29weSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5zbGljZSgwKTtcbn1cbmV4cG9ydCBjbGFzcyBFbnRyeSB7XG4gICAgY29uc3RydWN0b3IoZm4pIHtcbiAgICAgICAgdGhpcy5mbiA9IGZuO1xuICAgICAgICB0aGlzLnBhcmVudHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuY2hpbGRWYWx1ZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIFdoZW4gdGhpcyBFbnRyeSBoYXMgY2hpbGRyZW4gdGhhdCBhcmUgZGlydHksIHRoaXMgcHJvcGVydHkgYmVjb21lc1xuICAgICAgICAvLyBhIFNldCBjb250YWluaW5nIG90aGVyIEVudHJ5IG9iamVjdHMsIGJvcnJvd2VkIGZyb20gZW1wdHlTZXRQb29sLlxuICAgICAgICAvLyBXaGVuIHRoZSBzZXQgYmVjb21lcyBlbXB0eSwgaXQgZ2V0cyByZWN5Y2xlZCBiYWNrIHRvIGVtcHR5U2V0UG9vbC5cbiAgICAgICAgdGhpcy5kaXJ0eUNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMucmVjb21wdXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICB0aGlzLmRlcHMgPSBudWxsO1xuICAgICAgICArK0VudHJ5LmNvdW50O1xuICAgIH1cbiAgICBwZWVrKCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPT09IDEgJiYgIW1pZ2h0QmVEaXJ0eSh0aGlzKSkge1xuICAgICAgICAgICAgcmVtZW1iZXJQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVswXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGlzIGlzIHRoZSBtb3N0IGltcG9ydGFudCBtZXRob2Qgb2YgdGhlIEVudHJ5IEFQSSwgYmVjYXVzZSBpdFxuICAgIC8vIGRldGVybWluZXMgd2hldGhlciB0aGUgY2FjaGVkIHRoaXMudmFsdWUgY2FuIGJlIHJldHVybmVkIGltbWVkaWF0ZWx5LFxuICAgIC8vIG9yIG11c3QgYmUgcmVjb21wdXRlZC4gVGhlIG92ZXJhbGwgcGVyZm9ybWFuY2Ugb2YgdGhlIGNhY2hpbmcgc3lzdGVtXG4gICAgLy8gZGVwZW5kcyBvbiB0aGUgdHJ1dGggb2YgdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbnM6ICgxKSB0aGlzLmRpcnR5IGlzXG4gICAgLy8gdXN1YWxseSBmYWxzZSwgKDIpIHRoaXMuZGlydHlDaGlsZHJlbiBpcyB1c3VhbGx5IG51bGwvZW1wdHksIGFuZCB0aHVzXG4gICAgLy8gKDMpIHZhbHVlR2V0KHRoaXMudmFsdWUpIGlzIHVzdWFsbHkgcmV0dXJuZWQgd2l0aG91dCByZWNvbXB1dGF0aW9uLlxuICAgIHJlY29tcHV0ZShhcmdzKSB7XG4gICAgICAgIGFzc2VydCghdGhpcy5yZWNvbXB1dGluZywgXCJhbHJlYWR5IHJlY29tcHV0aW5nXCIpO1xuICAgICAgICByZW1lbWJlclBhcmVudCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIG1pZ2h0QmVEaXJ0eSh0aGlzKVxuICAgICAgICAgICAgPyByZWFsbHlSZWNvbXB1dGUodGhpcywgYXJncylcbiAgICAgICAgICAgIDogdmFsdWVHZXQodGhpcy52YWx1ZSk7XG4gICAgfVxuICAgIHNldERpcnR5KCkge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHJlcG9ydERpcnR5KHRoaXMpO1xuICAgICAgICAvLyBXZSBjYW4gZ28gYWhlYWQgYW5kIHVuc3Vic2NyaWJlIGhlcmUsIHNpbmNlIGFueSBmdXJ0aGVyIGRpcnR5XG4gICAgICAgIC8vIG5vdGlmaWNhdGlvbnMgd2UgcmVjZWl2ZSB3aWxsIGJlIHJlZHVuZGFudCwgYW5kIHVuc3Vic2NyaWJpbmcgbWF5XG4gICAgICAgIC8vIGZyZWUgdXAgc29tZSByZXNvdXJjZXMsIGUuZy4gZmlsZSB3YXRjaGVycy5cbiAgICAgICAgbWF5YmVVbnN1YnNjcmliZSh0aGlzKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5zZXREaXJ0eSgpO1xuICAgICAgICAvLyBTZXZlciBhbnkgZGVwZW5kZW5jeSByZWxhdGlvbnNoaXBzIHdpdGggb3VyIG93biBjaGlsZHJlbiwgc28gdGhvc2VcbiAgICAgICAgLy8gY2hpbGRyZW4gZG9uJ3QgcmV0YWluIHRoaXMgcGFyZW50IEVudHJ5IGluIHRoZWlyIGNoaWxkLnBhcmVudHMgc2V0cyxcbiAgICAgICAgLy8gdGhlcmVieSBwcmV2ZW50aW5nIGl0IGZyb20gYmVpbmcgZnVsbHkgZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gICAgICAgIGZvcmdldENoaWxkcmVuKHRoaXMpO1xuICAgICAgICAvLyBCZWNhdXNlIHRoaXMgZW50cnkgaGFzIGJlZW4ga2lja2VkIG91dCBvZiB0aGUgY2FjaGUgKGluIGluZGV4LmpzKSxcbiAgICAgICAgLy8gd2UndmUgbG9zdCB0aGUgYWJpbGl0eSB0byBmaW5kIG91dCBpZi93aGVuIHRoaXMgZW50cnkgYmVjb21lcyBkaXJ0eSxcbiAgICAgICAgLy8gd2hldGhlciB0aGF0IGhhcHBlbnMgdGhyb3VnaCBhIHN1YnNjcmlwdGlvbiwgYmVjYXVzZSBvZiBhIGRpcmVjdCBjYWxsXG4gICAgICAgIC8vIHRvIGVudHJ5LnNldERpcnR5KCksIG9yIGJlY2F1c2Ugb25lIG9mIGl0cyBjaGlsZHJlbiBiZWNvbWVzIGRpcnR5LlxuICAgICAgICAvLyBCZWNhdXNlIG9mIHRoaXMgbG9zcyBvZiBmdXR1cmUgaW5mb3JtYXRpb24sIHdlIGhhdmUgdG8gYXNzdW1lIHRoZVxuICAgICAgICAvLyB3b3JzdCAodGhhdCB0aGlzIGVudHJ5IG1pZ2h0IGhhdmUgYmVjb21lIGRpcnR5IHZlcnkgc29vbiksIHNvIHdlIG11c3RcbiAgICAgICAgLy8gaW1tZWRpYXRlbHkgbWFyayB0aGlzIGVudHJ5J3MgcGFyZW50cyBhcyBkaXJ0eS4gTm9ybWFsbHkgd2UgY291bGRcbiAgICAgICAgLy8ganVzdCBjYWxsIGVudHJ5LnNldERpcnR5KCkgcmF0aGVyIHRoYW4gY2FsbGluZyBwYXJlbnQuc2V0RGlydHkoKSBmb3JcbiAgICAgICAgLy8gZWFjaCBwYXJlbnQsIGJ1dCB0aGF0IHdvdWxkIGxlYXZlIHRoaXMgZW50cnkgaW4gcGFyZW50LmNoaWxkVmFsdWVzXG4gICAgICAgIC8vIGFuZCBwYXJlbnQuZGlydHlDaGlsZHJlbiwgd2hpY2ggd291bGQgcHJldmVudCB0aGUgY2hpbGQgZnJvbSBiZWluZ1xuICAgICAgICAvLyB0cnVseSBmb3Jnb3R0ZW4uXG4gICAgICAgIGVhY2hQYXJlbnQodGhpcywgKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgICAgICAgICAgIHBhcmVudC5zZXREaXJ0eSgpO1xuICAgICAgICAgICAgZm9yZ2V0Q2hpbGQocGFyZW50LCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvcmdldCgpIHtcbiAgICAgICAgLy8gVGhlIGNvZGUgdGhhdCBjcmVhdGVzIEVudHJ5IG9iamVjdHMgaW4gaW5kZXgudHMgd2lsbCByZXBsYWNlIHRoaXMgbWV0aG9kXG4gICAgICAgIC8vIHdpdGggb25lIHRoYXQgYWN0dWFsbHkgcmVtb3ZlcyB0aGUgRW50cnkgZnJvbSB0aGUgY2FjaGUsIHdoaWNoIHdpbGwgYWxzb1xuICAgICAgICAvLyB0cmlnZ2VyIHRoZSBlbnRyeS5kaXNwb3NlIG1ldGhvZC5cbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGRlcGVuZE9uKGRlcCkge1xuICAgICAgICBkZXAuYWRkKHRoaXMpO1xuICAgICAgICBpZiAoIXRoaXMuZGVwcykge1xuICAgICAgICAgICAgdGhpcy5kZXBzID0gZW1wdHlTZXRQb29sLnBvcCgpIHx8IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlcHMuYWRkKGRlcCk7XG4gICAgfVxuICAgIGZvcmdldERlcHMoKSB7XG4gICAgICAgIGlmICh0aGlzLmRlcHMpIHtcbiAgICAgICAgICAgIGFycmF5RnJvbVNldCh0aGlzLmRlcHMpLmZvckVhY2goZGVwID0+IGRlcC5kZWxldGUodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5kZXBzLmNsZWFyKCk7XG4gICAgICAgICAgICBlbXB0eVNldFBvb2wucHVzaCh0aGlzLmRlcHMpO1xuICAgICAgICAgICAgdGhpcy5kZXBzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbkVudHJ5LmNvdW50ID0gMDtcbmZ1bmN0aW9uIHJlbWVtYmVyUGFyZW50KGNoaWxkKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcGFyZW50RW50cnlTbG90LmdldFZhbHVlKCk7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICBjaGlsZC5wYXJlbnRzLmFkZChwYXJlbnQpO1xuICAgICAgICBpZiAoIXBhcmVudC5jaGlsZFZhbHVlcy5oYXMoY2hpbGQpKSB7XG4gICAgICAgICAgICBwYXJlbnQuY2hpbGRWYWx1ZXMuc2V0KGNoaWxkLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pZ2h0QmVEaXJ0eShjaGlsZCkpIHtcbiAgICAgICAgICAgIHJlcG9ydERpcnR5Q2hpbGQocGFyZW50LCBjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXBvcnRDbGVhbkNoaWxkKHBhcmVudCwgY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVhbGx5UmVjb21wdXRlKGVudHJ5LCBhcmdzKSB7XG4gICAgZm9yZ2V0Q2hpbGRyZW4oZW50cnkpO1xuICAgIC8vIFNldCBlbnRyeSBhcyB0aGUgcGFyZW50IGVudHJ5IHdoaWxlIGNhbGxpbmcgcmVjb21wdXRlTmV3VmFsdWUoZW50cnkpLlxuICAgIHBhcmVudEVudHJ5U2xvdC53aXRoVmFsdWUoZW50cnksIHJlY29tcHV0ZU5ld1ZhbHVlLCBbZW50cnksIGFyZ3NdKTtcbiAgICBpZiAobWF5YmVTdWJzY3JpYmUoZW50cnksIGFyZ3MpKSB7XG4gICAgICAgIC8vIElmIHdlIHN1Y2Nlc3NmdWxseSByZWNvbXB1dGVkIGVudHJ5LnZhbHVlIGFuZCBkaWQgbm90IGZhaWwgdG9cbiAgICAgICAgLy8gKHJlKXN1YnNjcmliZSwgdGhlbiB0aGlzIEVudHJ5IGlzIG5vIGxvbmdlciBleHBsaWNpdGx5IGRpcnR5LlxuICAgICAgICBzZXRDbGVhbihlbnRyeSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZUdldChlbnRyeS52YWx1ZSk7XG59XG5mdW5jdGlvbiByZWNvbXB1dGVOZXdWYWx1ZShlbnRyeSwgYXJncykge1xuICAgIGVudHJ5LnJlY29tcHV0aW5nID0gdHJ1ZTtcbiAgICBjb25zdCB7IG5vcm1hbGl6ZVJlc3VsdCB9ID0gZW50cnk7XG4gICAgbGV0IG9sZFZhbHVlQ29weTtcbiAgICBpZiAobm9ybWFsaXplUmVzdWx0ICYmIGVudHJ5LnZhbHVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBvbGRWYWx1ZUNvcHkgPSB2YWx1ZUNvcHkoZW50cnkudmFsdWUpO1xuICAgIH1cbiAgICAvLyBNYWtlIGVudHJ5LnZhbHVlIGFuIGVtcHR5IGFycmF5LCByZXByZXNlbnRpbmcgYW4gdW5rbm93biB2YWx1ZS5cbiAgICBlbnRyeS52YWx1ZS5sZW5ndGggPSAwO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIElmIGVudHJ5LmZuIHN1Y2NlZWRzLCBlbnRyeS52YWx1ZSB3aWxsIGJlY29tZSBhIG5vcm1hbCBWYWx1ZS5cbiAgICAgICAgZW50cnkudmFsdWVbMF0gPSBlbnRyeS5mbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHZpYWJsZSBvbGRWYWx1ZUNvcHkgdG8gY29tcGFyZSB3aXRoIHRoZSAoc3VjY2Vzc2Z1bGx5XG4gICAgICAgIC8vIHJlY29tcHV0ZWQpIG5ldyBlbnRyeS52YWx1ZSwgYW5kIHRoZXkgYXJlIG5vdCBhbHJlYWR5ID09PSBpZGVudGljYWwsIGdpdmVcbiAgICAgICAgLy8gbm9ybWFsaXplUmVzdWx0IGEgY2hhbmNlIHRvIHBpY2svY2hvb3NlL3JldXNlIHBhcnRzIG9mIG9sZFZhbHVlQ29weVswXVxuICAgICAgICAvLyBhbmQvb3IgZW50cnkudmFsdWVbMF0gdG8gZGV0ZXJtaW5lIHRoZSBmaW5hbCBjYWNoZWQgZW50cnkudmFsdWUuXG4gICAgICAgIGlmIChub3JtYWxpemVSZXN1bHQgJiYgb2xkVmFsdWVDb3B5ICYmICF2YWx1ZUlzKG9sZFZhbHVlQ29weSwgZW50cnkudmFsdWUpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVudHJ5LnZhbHVlWzBdID0gbm9ybWFsaXplUmVzdWx0KGVudHJ5LnZhbHVlWzBdLCBvbGRWYWx1ZUNvcHlbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgbm9ybWFsaXplUmVzdWx0IHRocm93cywganVzdCB1c2UgdGhlIG5ld2VyIHZhbHVlLCByYXRoZXIgdGhhblxuICAgICAgICAgICAgICAgIC8vIHNhdmluZyB0aGUgZXhjZXB0aW9uIGFzIGVudHJ5LnZhbHVlWzFdLlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIElmIGVudHJ5LmZuIHRocm93cywgZW50cnkudmFsdWUgd2lsbCBob2xkIHRoYXQgZXhjZXB0aW9uLlxuICAgICAgICBlbnRyeS52YWx1ZVsxXSA9IGU7XG4gICAgfVxuICAgIC8vIEVpdGhlciB3YXksIHRoaXMgbGluZSBpcyBhbHdheXMgcmVhY2hlZC5cbiAgICBlbnRyeS5yZWNvbXB1dGluZyA9IGZhbHNlO1xufVxuZnVuY3Rpb24gbWlnaHRCZURpcnR5KGVudHJ5KSB7XG4gICAgcmV0dXJuIGVudHJ5LmRpcnR5IHx8ICEhKGVudHJ5LmRpcnR5Q2hpbGRyZW4gJiYgZW50cnkuZGlydHlDaGlsZHJlbi5zaXplKTtcbn1cbmZ1bmN0aW9uIHNldENsZWFuKGVudHJ5KSB7XG4gICAgZW50cnkuZGlydHkgPSBmYWxzZTtcbiAgICBpZiAobWlnaHRCZURpcnR5KGVudHJ5KSkge1xuICAgICAgICAvLyBUaGlzIEVudHJ5IG1heSBzdGlsbCBoYXZlIGRpcnR5IGNoaWxkcmVuLCBpbiB3aGljaCBjYXNlIHdlIGNhbid0XG4gICAgICAgIC8vIGxldCBvdXIgcGFyZW50cyBrbm93IHdlJ3JlIGNsZWFuIGp1c3QgeWV0LlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcG9ydENsZWFuKGVudHJ5KTtcbn1cbmZ1bmN0aW9uIHJlcG9ydERpcnR5KGNoaWxkKSB7XG4gICAgZWFjaFBhcmVudChjaGlsZCwgcmVwb3J0RGlydHlDaGlsZCk7XG59XG5mdW5jdGlvbiByZXBvcnRDbGVhbihjaGlsZCkge1xuICAgIGVhY2hQYXJlbnQoY2hpbGQsIHJlcG9ydENsZWFuQ2hpbGQpO1xufVxuZnVuY3Rpb24gZWFjaFBhcmVudChjaGlsZCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBwYXJlbnRDb3VudCA9IGNoaWxkLnBhcmVudHMuc2l6ZTtcbiAgICBpZiAocGFyZW50Q291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyZW50cyA9IGFycmF5RnJvbVNldChjaGlsZC5wYXJlbnRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJlbnRDb3VudDsgKytpKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhwYXJlbnRzW2ldLCBjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBMZXQgYSBwYXJlbnQgRW50cnkga25vdyB0aGF0IG9uZSBvZiBpdHMgY2hpbGRyZW4gbWF5IGJlIGRpcnR5LlxuZnVuY3Rpb24gcmVwb3J0RGlydHlDaGlsZChwYXJlbnQsIGNoaWxkKSB7XG4gICAgLy8gTXVzdCBoYXZlIGNhbGxlZCByZW1lbWJlclBhcmVudChjaGlsZCkgYmVmb3JlIGNhbGxpbmdcbiAgICAvLyByZXBvcnREaXJ0eUNoaWxkKHBhcmVudCwgY2hpbGQpLlxuICAgIGFzc2VydChwYXJlbnQuY2hpbGRWYWx1ZXMuaGFzKGNoaWxkKSk7XG4gICAgYXNzZXJ0KG1pZ2h0QmVEaXJ0eShjaGlsZCkpO1xuICAgIGNvbnN0IHBhcmVudFdhc0NsZWFuID0gIW1pZ2h0QmVEaXJ0eShwYXJlbnQpO1xuICAgIGlmICghcGFyZW50LmRpcnR5Q2hpbGRyZW4pIHtcbiAgICAgICAgcGFyZW50LmRpcnR5Q2hpbGRyZW4gPSBlbXB0eVNldFBvb2wucG9wKCkgfHwgbmV3IFNldDtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFyZW50LmRpcnR5Q2hpbGRyZW4uaGFzKGNoaWxkKSkge1xuICAgICAgICAvLyBJZiB3ZSBhbHJlYWR5IGtub3cgdGhpcyBjaGlsZCBpcyBkaXJ0eSwgdGhlbiB3ZSBtdXN0IGhhdmUgYWxyZWFkeVxuICAgICAgICAvLyBpbmZvcm1lZCBvdXIgb3duIHBhcmVudHMgdGhhdCB3ZSBhcmUgZGlydHksIHNvIHdlIGNhbiB0ZXJtaW5hdGVcbiAgICAgICAgLy8gdGhlIHJlY3Vyc2lvbiBlYXJseS5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwYXJlbnQuZGlydHlDaGlsZHJlbi5hZGQoY2hpbGQpO1xuICAgIC8vIElmIHBhcmVudCB3YXMgY2xlYW4gYmVmb3JlLCBpdCBqdXN0IGJlY2FtZSAocG9zc2libHkpIGRpcnR5IChhY2NvcmRpbmcgdG9cbiAgICAvLyBtaWdodEJlRGlydHkpLCBzaW5jZSB3ZSBqdXN0IGFkZGVkIGNoaWxkIHRvIHBhcmVudC5kaXJ0eUNoaWxkcmVuLlxuICAgIGlmIChwYXJlbnRXYXNDbGVhbikge1xuICAgICAgICByZXBvcnREaXJ0eShwYXJlbnQpO1xuICAgIH1cbn1cbi8vIExldCBhIHBhcmVudCBFbnRyeSBrbm93IHRoYXQgb25lIG9mIGl0cyBjaGlsZHJlbiBpcyBubyBsb25nZXIgZGlydHkuXG5mdW5jdGlvbiByZXBvcnRDbGVhbkNoaWxkKHBhcmVudCwgY2hpbGQpIHtcbiAgICAvLyBNdXN0IGhhdmUgY2FsbGVkIHJlbWVtYmVyQ2hpbGQoY2hpbGQpIGJlZm9yZSBjYWxsaW5nXG4gICAgLy8gcmVwb3J0Q2xlYW5DaGlsZChwYXJlbnQsIGNoaWxkKS5cbiAgICBhc3NlcnQocGFyZW50LmNoaWxkVmFsdWVzLmhhcyhjaGlsZCkpO1xuICAgIGFzc2VydCghbWlnaHRCZURpcnR5KGNoaWxkKSk7XG4gICAgY29uc3QgY2hpbGRWYWx1ZSA9IHBhcmVudC5jaGlsZFZhbHVlcy5nZXQoY2hpbGQpO1xuICAgIGlmIChjaGlsZFZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwYXJlbnQuY2hpbGRWYWx1ZXMuc2V0KGNoaWxkLCB2YWx1ZUNvcHkoY2hpbGQudmFsdWUpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIXZhbHVlSXMoY2hpbGRWYWx1ZSwgY2hpbGQudmFsdWUpKSB7XG4gICAgICAgIHBhcmVudC5zZXREaXJ0eSgpO1xuICAgIH1cbiAgICByZW1vdmVEaXJ0eUNoaWxkKHBhcmVudCwgY2hpbGQpO1xuICAgIGlmIChtaWdodEJlRGlydHkocGFyZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcG9ydENsZWFuKHBhcmVudCk7XG59XG5mdW5jdGlvbiByZW1vdmVEaXJ0eUNoaWxkKHBhcmVudCwgY2hpbGQpIHtcbiAgICBjb25zdCBkYyA9IHBhcmVudC5kaXJ0eUNoaWxkcmVuO1xuICAgIGlmIChkYykge1xuICAgICAgICBkYy5kZWxldGUoY2hpbGQpO1xuICAgICAgICBpZiAoZGMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGVtcHR5U2V0UG9vbC5sZW5ndGggPCBQT09MX1RBUkdFVF9TSVpFKSB7XG4gICAgICAgICAgICAgICAgZW1wdHlTZXRQb29sLnB1c2goZGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50LmRpcnR5Q2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gUmVtb3ZlcyBhbGwgY2hpbGRyZW4gZnJvbSB0aGlzIGVudHJ5IGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZVxuLy8gcmVtb3ZlZCBjaGlsZHJlbi5cbmZ1bmN0aW9uIGZvcmdldENoaWxkcmVuKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuY2hpbGRWYWx1ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgcGFyZW50LmNoaWxkVmFsdWVzLmZvckVhY2goKF92YWx1ZSwgY2hpbGQpID0+IHtcbiAgICAgICAgICAgIGZvcmdldENoaWxkKHBhcmVudCwgY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoaXMgcGFyZW50IEVudHJ5IGZyb20gYW55IHNldHMgdG8gd2hpY2ggaXQgd2FzIGFkZGVkIGJ5IHRoZVxuICAgIC8vIGFkZFRvU2V0IG1ldGhvZC5cbiAgICBwYXJlbnQuZm9yZ2V0RGVwcygpO1xuICAgIC8vIEFmdGVyIHdlIGZvcmdldCBhbGwgb3VyIGNoaWxkcmVuLCB0aGlzLmRpcnR5Q2hpbGRyZW4gbXVzdCBiZSBlbXB0eVxuICAgIC8vIGFuZCB0aGVyZWZvcmUgbXVzdCBoYXZlIGJlZW4gcmVzZXQgdG8gbnVsbC5cbiAgICBhc3NlcnQocGFyZW50LmRpcnR5Q2hpbGRyZW4gPT09IG51bGwpO1xufVxuZnVuY3Rpb24gZm9yZ2V0Q2hpbGQocGFyZW50LCBjaGlsZCkge1xuICAgIGNoaWxkLnBhcmVudHMuZGVsZXRlKHBhcmVudCk7XG4gICAgcGFyZW50LmNoaWxkVmFsdWVzLmRlbGV0ZShjaGlsZCk7XG4gICAgcmVtb3ZlRGlydHlDaGlsZChwYXJlbnQsIGNoaWxkKTtcbn1cbmZ1bmN0aW9uIG1heWJlU3Vic2NyaWJlKGVudHJ5LCBhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBlbnRyeS5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWF5YmVVbnN1YnNjcmliZShlbnRyeSk7IC8vIFByZXZlbnQgZG91YmxlIHN1YnNjcmlwdGlvbnMuXG4gICAgICAgICAgICBlbnRyeS51bnN1YnNjcmliZSA9IGVudHJ5LnN1YnNjcmliZS5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBFbnRyeSBoYXMgYSBzdWJzY3JpYmUgZnVuY3Rpb24gYW5kIGl0IHRocmV3IGFuIGV4Y2VwdGlvblxuICAgICAgICAgICAgLy8gKG9yIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uIGl0IHByZXZpb3VzbHkgcmV0dXJuZWQgbm93IHRocm93cyksXG4gICAgICAgICAgICAvLyByZXR1cm4gZmFsc2UgdG8gaW5kaWNhdGUgdGhhdCB3ZSB3ZXJlIG5vdCBhYmxlIHRvIHN1YnNjcmliZSAob3JcbiAgICAgICAgICAgIC8vIHVuc3Vic2NyaWJlKSwgYW5kIHRoaXMgRW50cnkgc2hvdWxkIHJlbWFpbiBkaXJ0eS5cbiAgICAgICAgICAgIGVudHJ5LnNldERpcnR5KCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmV0dXJuaW5nIHRydWUgaW5kaWNhdGVzIGVpdGhlciB0aGF0IHRoZXJlIHdhcyBubyBlbnRyeS5zdWJzY3JpYmVcbiAgICAvLyBmdW5jdGlvbiBvciB0aGF0IGl0IHN1Y2NlZWRlZC5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudHJ5LmpzLm1hcCJdLCJuYW1lcyI6WyJwYXJlbnRFbnRyeVNsb3QiLCJtYXliZVVuc3Vic2NyaWJlIiwiYXJyYXlGcm9tU2V0IiwiZW1wdHlTZXRQb29sIiwiUE9PTF9UQVJHRVRfU0laRSIsImFzc2VydCIsImNvbmRpdGlvbiIsIm9wdGlvbmFsTWVzc2FnZSIsIkVycm9yIiwidmFsdWVJcyIsImEiLCJiIiwibGVuIiwibGVuZ3RoIiwidmFsdWVHZXQiLCJ2YWx1ZSIsInZhbHVlQ29weSIsInNsaWNlIiwiRW50cnkiLCJjb25zdHJ1Y3RvciIsImZuIiwicGFyZW50cyIsIlNldCIsImNoaWxkVmFsdWVzIiwiTWFwIiwiZGlydHlDaGlsZHJlbiIsImRpcnR5IiwicmVjb21wdXRpbmciLCJkZXBzIiwiY291bnQiLCJwZWVrIiwibWlnaHRCZURpcnR5IiwicmVtZW1iZXJQYXJlbnQiLCJyZWNvbXB1dGUiLCJhcmdzIiwicmVhbGx5UmVjb21wdXRlIiwic2V0RGlydHkiLCJyZXBvcnREaXJ0eSIsImRpc3Bvc2UiLCJmb3JnZXRDaGlsZHJlbiIsImVhY2hQYXJlbnQiLCJwYXJlbnQiLCJjaGlsZCIsImZvcmdldENoaWxkIiwiZm9yZ2V0IiwiZGVwZW5kT24iLCJkZXAiLCJhZGQiLCJwb3AiLCJmb3JnZXREZXBzIiwiZm9yRWFjaCIsImRlbGV0ZSIsImNsZWFyIiwicHVzaCIsImdldFZhbHVlIiwiaGFzIiwic2V0IiwicmVwb3J0RGlydHlDaGlsZCIsInJlcG9ydENsZWFuQ2hpbGQiLCJlbnRyeSIsIndpdGhWYWx1ZSIsInJlY29tcHV0ZU5ld1ZhbHVlIiwibWF5YmVTdWJzY3JpYmUiLCJzZXRDbGVhbiIsIm5vcm1hbGl6ZVJlc3VsdCIsIm9sZFZhbHVlQ29weSIsImFwcGx5IiwiX2EiLCJlIiwic2l6ZSIsInJlcG9ydENsZWFuIiwiY2FsbGJhY2siLCJwYXJlbnRDb3VudCIsImkiLCJwYXJlbnRXYXNDbGVhbiIsImNoaWxkVmFsdWUiLCJnZXQiLCJyZW1vdmVEaXJ0eUNoaWxkIiwiZGMiLCJfdmFsdWUiLCJzdWJzY3JpYmUiLCJ1bnN1YnNjcmliZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/entry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/helpers.js":
/*!**********************************************!*\
  !*** ./node_modules/optimism/lib/helpers.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayFromSet: () => (/* binding */ arrayFromSet),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   maybeUnsubscribe: () => (/* binding */ maybeUnsubscribe)\n/* harmony export */ });\nconst { hasOwnProperty } = Object.prototype;\nconst arrayFromSet = Array.from || function(set) {\n    const array = [];\n    set.forEach((item)=>array.push(item));\n    return array;\n};\nfunction maybeUnsubscribe(entryOrDep) {\n    const { unsubscribe } = entryOrDep;\n    if (typeof unsubscribe === \"function\") {\n        entryOrDep.unsubscribe = void 0;\n        unsubscribe();\n    }\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTSxFQUFFQSxjQUFjLEVBQUcsR0FBR0MsT0FBT0MsU0FBUyxDQUFDO0FBQzdDLE1BQU1DLGVBQWVDLE1BQU1DLElBQUksSUFDbEMsU0FBVUMsR0FBRztJQUNULE1BQU1DLFFBQVEsRUFBRTtJQUNoQkQsSUFBSUUsT0FBTyxDQUFDQyxDQUFBQSxPQUFRRixNQUFNRyxJQUFJLENBQUNEO0lBQy9CLE9BQU9GO0FBQ1gsRUFBRTtBQUNDLFNBQVNJLGlCQUFpQkMsVUFBVTtJQUN2QyxNQUFNLEVBQUVDLFdBQVcsRUFBRSxHQUFHRDtJQUN4QixJQUFJLE9BQU9DLGdCQUFnQixZQUFZO1FBQ25DRCxXQUFXQyxXQUFXLEdBQUcsS0FBSztRQUM5QkE7SUFDSjtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbG9nLXF1ZXJ5LXdlYi8uL25vZGVfbW9kdWxlcy9vcHRpbWlzbS9saWIvaGVscGVycy5qcz8yYzA0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB7IGhhc093blByb3BlcnR5LCB9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmV4cG9ydCBjb25zdCBhcnJheUZyb21TZXQgPSBBcnJheS5mcm9tIHx8XG4gICAgZnVuY3Rpb24gKHNldCkge1xuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICBzZXQuZm9yRWFjaChpdGVtID0+IGFycmF5LnB1c2goaXRlbSkpO1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfTtcbmV4cG9ydCBmdW5jdGlvbiBtYXliZVVuc3Vic2NyaWJlKGVudHJ5T3JEZXApIHtcbiAgICBjb25zdCB7IHVuc3Vic2NyaWJlIH0gPSBlbnRyeU9yRGVwO1xuICAgIGlmICh0eXBlb2YgdW5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbnRyeU9yRGVwLnVuc3Vic2NyaWJlID0gdm9pZCAwO1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiYXJyYXlGcm9tU2V0IiwiQXJyYXkiLCJmcm9tIiwic2V0IiwiYXJyYXkiLCJmb3JFYWNoIiwiaXRlbSIsInB1c2giLCJtYXliZVVuc3Vic2NyaWJlIiwiZW50cnlPckRlcCIsInVuc3Vic2NyaWJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/optimism/lib/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyTrie: () => (/* reexport safe */ _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie),\n/* harmony export */   Slot: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.Slot),\n/* harmony export */   asyncFromGen: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.asyncFromGen),\n/* harmony export */   bindContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.bindContext),\n/* harmony export */   defaultMakeCacheKey: () => (/* binding */ defaultMakeCacheKey),\n/* harmony export */   dep: () => (/* reexport safe */ _dep_js__WEBPACK_IMPORTED_MODULE_3__.dep),\n/* harmony export */   noContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.noContext),\n/* harmony export */   nonReactive: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.nonReactive),\n/* harmony export */   setTimeout: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.setTimeout),\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/strong.js\");\n/* harmony import */ var _entry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entry.js */ \"(ssr)/./node_modules/optimism/lib/entry.js\");\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _dep_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dep.js */ \"(ssr)/./node_modules/optimism/lib/dep.js\");\n\n\n\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nfunction defaultMakeCacheKey(...args) {\n    const trie = defaultKeyTrie || (defaultKeyTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(typeof WeakMap === \"function\"));\n    return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\n\n;\nconst caches = new Set();\nfunction wrap(originalFunction, { max = Math.pow(2, 16), keyArgs, makeCacheKey = defaultMakeCacheKey, normalizeResult, subscribe, cache: cacheOption = _wry_caches__WEBPACK_IMPORTED_MODULE_4__.StrongCache } = Object.create(null)) {\n    const cache = typeof cacheOption === \"function\" ? new cacheOption(max, (entry)=>entry.dispose()) : cacheOption;\n    const optimistic = function() {\n        const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n        if (key === void 0) {\n            return originalFunction.apply(null, arguments);\n        }\n        let entry = cache.get(key);\n        if (!entry) {\n            cache.set(key, entry = new _entry_js__WEBPACK_IMPORTED_MODULE_1__.Entry(originalFunction));\n            entry.normalizeResult = normalizeResult;\n            entry.subscribe = subscribe;\n            // Give the Entry the ability to trigger cache.delete(key), even though\n            // the Entry itself does not know about key or cache.\n            entry.forget = ()=>cache.delete(key);\n        }\n        const value = entry.recompute(Array.prototype.slice.call(arguments));\n        // Move this entry to the front of the least-recently used queue,\n        // since we just finished computing its value.\n        cache.set(key, entry);\n        caches.add(cache);\n        // Clean up any excess entries in the cache, but only if there is no\n        // active parent entry, meaning we're not in the middle of a larger\n        // computation that might be flummoxed by the cleaning.\n        if (!_context_js__WEBPACK_IMPORTED_MODULE_2__.parentEntrySlot.hasValue()) {\n            caches.forEach((cache)=>cache.clean());\n            caches.clear();\n        }\n        return value;\n    };\n    Object.defineProperty(optimistic, \"size\", {\n        get: ()=>cache.size,\n        configurable: false,\n        enumerable: false\n    });\n    Object.freeze(optimistic.options = {\n        max,\n        keyArgs,\n        makeCacheKey,\n        normalizeResult,\n        subscribe,\n        cache\n    });\n    function dirtyKey(key) {\n        const entry = key && cache.get(key);\n        if (entry) {\n            entry.setDirty();\n        }\n    }\n    optimistic.dirtyKey = dirtyKey;\n    optimistic.dirty = function dirty() {\n        dirtyKey(makeCacheKey.apply(null, arguments));\n    };\n    function peekKey(key) {\n        const entry = key && cache.get(key);\n        if (entry) {\n            return entry.peek();\n        }\n    }\n    optimistic.peekKey = peekKey;\n    optimistic.peek = function peek() {\n        return peekKey(makeCacheKey.apply(null, arguments));\n    };\n    function forgetKey(key) {\n        return key ? cache.delete(key) : false;\n    }\n    optimistic.forgetKey = forgetKey;\n    optimistic.forget = function forget() {\n        return forgetKey(makeCacheKey.apply(null, arguments));\n    };\n    optimistic.makeCacheKey = makeCacheKey;\n    optimistic.getKey = keyArgs ? function getKey() {\n        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n    } : makeCacheKey;\n    return Object.freeze(optimistic);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/index.js\n");

/***/ })

};
;